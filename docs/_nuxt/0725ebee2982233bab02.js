(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{188:function(e,n,v){"use strict";v.r(n);var _=v(13),component=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,v=e._self._c||n;return v("div",{staticClass:"markdown-container"},[v("h1",[e._v("基础")]),e._v(" "),v("ol",[v("li",[e._v("每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块\n"),v("ul",[v("li",[e._v("缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用"),v("strong",[e._v("4个空格")]),e._v("的缩进。")]),e._v(" "),v("li",[e._v("缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。")]),e._v(" "),v("li",[e._v("Python程序是"),v("strong",[e._v("大小写敏感")]),e._v("的")])])])]),e._v(" "),v("h2",[e._v("数据类型和变量")]),e._v(" "),v("p",[e._v("在Python中，能够直接处理的数据类型有以下几种（整数，浮点数，字符串)")]),e._v(" "),v("ol",[v("li",[e._v("整数\n"),v("ul",[v("li",[e._v("Python可以处理任意大小的整数")]),e._v(" "),v("li",[e._v("十六进制用0x前缀和0-9，a-f表示（"),v("code",[e._v("0xff00")]),e._v(" "),v("code",[e._v("0xa5b4c3d2")]),e._v("）")]),e._v(" "),v("li",[e._v("==整数运算永远是精确的==")])])]),e._v(" "),v("li",[e._v("浮点数\n"),v("ul",[v("li",[e._v("对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代。1.23x10<sup>9</sup>就是"),v("code",[e._v("1.23e9")]),e._v("或者"),v("code",[e._v("12.3e8")])])])]),e._v(" "),v("li",[e._v("字符串\n"),v("ul",[v("li",[v("p",[e._v("可以用转义字符\\来标识"),v("code",[e._v("'")]),e._v("或者"),v("code",[e._v('"')])]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("'I\\'m \\\"OK\\\"!'\n")])])]),e._v(" "),v("li",[v("p",[e._v("r''表示''内部的字符串默认不转义")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> print('\\\\\\t\\\\')\n\\       \\\n>>> print(r'\\\\\\t\\\\')\n\\\\\\t\\\\\n")])])]),e._v(" "),v("li",[v("p",[e._v("用'''...'''的格式表示多行内容(注意...是提示符，不是代码的一部分)")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> print('''line1\n... line2\n... line3''')\nline1\nline2\nline3\n")])])])])]),e._v(" "),v("li",[e._v("布尔值\n"),v("ul",[v("li",[e._v("布尔值可以用"),v("code",[e._v("and")]),e._v("、"),v("code",[e._v("or")]),e._v("和"),v("code",[e._v("not")]),e._v("运算")])])]),e._v(" "),v("li",[e._v("空值")])]),e._v(" "),v("ul",[v("li",[e._v("空值是Python里一个特殊的值，用"),v("code",[e._v("None")]),e._v("表示")])]),e._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[e._v("变量\n"),v("ul",[v("li",[e._v("python是动态类型语言，同一个变量可以反复赋值，而且可以是不同类型的变量。")]),e._v(" "),v("li",[e._v("创建变量时 python 解析器干了两件事情\n"),v("ul",[v("li",[e._v("在内存中创建了一个"),v("code",[e._v("'ABC'")]),e._v("的字符串")]),e._v(" "),v("li",[e._v("在内存中创建了一个名为"),v("code",[e._v("a")]),e._v("的变量，并把它指向"),v("code",[e._v("'ABC'")])])])])])]),e._v(" "),v("li",[e._v("常量")])]),e._v(" "),v("h2",[e._v("字符串和编码")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言")])]),e._v(" "),v("li",[v("p",[e._v("对于"),v("strong",[e._v("单个字符")]),e._v("的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> ord('A')\n65\n>>> ord('中')\n20013\n>>> chr(66)\n'B'\n>>> chr(25991)\n'文\n")])])]),e._v(" "),v("li",[v("p",[e._v("由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。")])]),e._v(" "),v("li",[v("p",[e._v("以Unicode表示的str通过"),v("code",[e._v("encode()")]),e._v("方法可以编码为指定的bytes，"),v("code",[e._v("decode()")]),e._v("把"),v("code",[e._v("bytes")]),e._v("变成"),v("code",[e._v("str")])]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[v("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# encode")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"hljs-meta"}},[e._v(">>> ")]),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'ABC'")]),e._v(".encode("),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'ascii'")]),e._v(")\n"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("b'ABC'")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"hljs-meta"}},[e._v(">>> ")]),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'中文'")]),e._v(".encode("),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'utf-8'")]),e._v(")\n"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"hljs-meta"}},[e._v(">>> ")]),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'中文'")]),e._v(".encode("),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'ascii'")]),e._v(")\nTraceback (most recent call last):\n  File "),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"<stdin>"')]),e._v(", line "),v("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(", "),v("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("in")]),e._v(" <module>\nUnicodeEncodeError: "),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'ascii'")]),e._v(" codec can"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'t encode characters in position 0-1: ordinal not in range(128)\n\n# decode\n>>> b'")]),e._v("\\xe4\\xb8\\xad\\xf"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("f'.decode('")]),e._v("utf"),v("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("-8")]),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("')\nTraceback (most recent call last):\n  ...\nUnicodeDecodeError: '")]),e._v("utf"),v("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("-8")]),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("' codec can'")]),e._v("t decode byte "),v("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("0xff")]),e._v(" "),v("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("in")]),e._v(" position "),v("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3")]),e._v(": invalid start byte\n\n"),v("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# 可以传入errors='ignore'忽略错误的字节")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("b'\\xe4\\xb8\\xad\\xff'")]),e._v(".decode("),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'utf-8'")]),e._v(", errors="),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'ignore'")]),e._v(")\n")])])]),e._v(" "),v("li",[v("p",[e._v("在bytes中，无法显示为ASCII字符的字节，用"),v("code",[e._v("\\x##")]),e._v("显示")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("len()")]),e._v("计算"),v("code",[e._v("str")]),e._v("包含多少个字符，计算"),v("code",[e._v("bytes")]),e._v("包含多少字节数")]),e._v(" "),v("pre",[v("code",[e._v(" ```\n # 计算 str\n >>> len('ABC')\n 3\n >>> len('中文')\n 2\n \n # 计算 bytes\n >>> len(b'ABC')\n 3\n >>> len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\n 6\n >>> len('中文'.encode('utf-8'))\n 6\n ```\n")])])]),e._v(" "),v("li",[v("p",[e._v("为了让python解释器按照UTF-8读取")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；")])]),e._v(" "),v("li",[v("p",[e._v("第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。")])]),e._v(" "),v("li",[v("p",[e._v("申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[v("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#!/usr/bin/env python3")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# -*- coding: utf-8 -*-")]),e._v("\n")])])])])])]),e._v(" "),v("p",[e._v("8.格式化字符串")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("%")]),e._v("运算符格式化字符串.")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("有几个"),v("code",[e._v("%?")]),e._v("占位符，后面就跟几个变量或者值，顺序对应。")])]),e._v(" "),v("li",[v("p",[e._v("如果只有一个%?，括号可以省略。")])]),e._v(" "),v("li",[v("p",[e._v("用%%来表示一个%")])]),e._v(" "),v("li",[v("p",[e._v("格式化整数和浮点数还可以指定是否补0和整数与小数的位数")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("符")]),e._v(" "),v("th",[e._v("替换内容")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("d")]),e._v(" "),v("td",[e._v("整数")])]),e._v(" "),v("tr",[v("td",[e._v("f")]),e._v(" "),v("td",[e._v("浮点数")])]),e._v(" "),v("tr",[v("td",[e._v("s")]),e._v(" "),v("td",[e._v("字符串(永远起作用，它会把任何数据类型转换为字符串)")])]),e._v(" "),v("tr",[v("td",[e._v("x")]),e._v(" "),v("td",[e._v("十六进制整数")])])])]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(" print('%2d-%02d' % (3, 1)) # 3-01\n print('%.2f' % 3.1415926) # 3.14\t\t\t```\n \n")])])])])]),e._v(" "),v("li",[v("p",[e._v("字符串的format()方法格式化字符串")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)\n'Hello, 小明, 成绩提升了 17.1%'\n")])])])]),e._v(" "),v("h2",[e._v("list和tuple")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("list是一种有序的集合，可以随时添加和删除其中的元素")]),e._v(" "),v("ul",[v("li",[v("p",[v("code",[e._v("len()")]),e._v("函数获得list元素的个数")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n>>> len(classmates)\n3\n")])])]),e._v(" "),v("li",[v("p",[e._v("索引访问 "),v("code",[e._v("classmates = ['Michael', 'Bob', 'Tracy']")])])]),e._v(" "),v("li",[v("p",[e._v("正整数索引表示从左到右")]),e._v(" "),v("pre",[v("code",[e._v(" ```\n >>> classmates[0]\n 'Michael'\n >>> classmates[1]\n 'Bob'\n >>> classmates[3]\n Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n IndexError: list index out of range\n ```\n")])])]),e._v(" "),v("li",[v("p",[e._v("负整数索引表示从右到左")]),e._v(" "),v("pre",[v("code",[e._v(" ```\n >>> classmates[-1]\n 'Tracy'\n >>> classmates[-2]\n 'Bob'\n >>> classmates[-3]\n 'Michael'\n ```\n")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("append()")]),e._v("追加元素")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("insert()")]),e._v("指定位置插入元素")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("pop()")]),e._v("删除list末尾元素，"),v("code",[e._v("pop(i)")]),e._v("删除指定索引元素(返回被删除元素)")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n\n>>> classmates.pop(1)\n'Jack'\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n")])])])])]),e._v(" "),v("li",[v("p",[e._v("tuple是另一种有序列表叫元组")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> classmates = ('Michael', 'Bob', 'Tracy')\n")])]),e._v(" "),v("ul",[v("li",[v("p",[e._v("只有1个元素的tuple定义时必须加一个逗号"),v("code",[e._v(",")]),e._v("，来消除歧义")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> t = (1,)\n>>> t\n(1,)\n")])])])])])]),e._v(" "),v("h2",[e._v("条件判断")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("# 列1\nage = 20\nif age >= 6:\n    print('teenager')\nelif age >= 18:\n    print('adult')\nelse:\n    print('kid')\n# 结果为 adult\n\n# 列2\ns = input('birth: ')\nbirth = int(s)\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\nint(s)\n")])]),e._v(" "),v("h2",[e._v("循环")]),e._v(" "),v("ol",[v("li",[v("p",[v("code",[e._v("for...in")]),e._v(" 循环")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("names = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("while")]),e._v(" 循环")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("sum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n\n")])])])]),e._v(" "),v("p",[v("code",[e._v("break")]),e._v("语句可以在循环过程中直接退出循环，而"),v("code",[e._v("continue")]),e._v("语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用")]),e._v(" "),v("p",[e._v("不要滥用"),v("code",[e._v("break")]),e._v("和"),v("code",[e._v("continue")]),e._v("语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到"),v("code",[e._v("break")]),e._v("和"),v("code",[e._v("continue")]),e._v("语句")]),e._v(" "),v("h2",[v("code",[e._v("dict")]),e._v("和"),v("code",[e._v("set")])]),e._v(" "),v("ol",[v("li",[v("p",[e._v("dict")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("Python内置了字典：dict的支持,使用键-值（key-value）存储，具有极快的查找速度")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n\n# 多次对一个key放入value，后面的值会把前面的值冲掉\n>>> d['Jack'] = 90\n>>> d['Jack']\n90\n>>> d['Jack'] = 88\n>>> d['Jack']\n88\n")])])]),e._v(" "),v("li",[v("p",[e._v("如果key不存在，dict就会报错,避免key不存在的错误的两种方法：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("通过"),v("code",[e._v("in")]),e._v("判断")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> 'Thomas' in d\nFalse\n")])])]),e._v(" "),v("li",[v("p",[e._v("通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n")])]),e._v(" "),v("p",[e._v("注意：返回None的时候Python的交互环境不显示结果。")])])])]),e._v(" "),v("li",[v("p",[e._v("删除元素")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n")])])]),e._v(" "),v("li",[v("p",[e._v("对比"),v("code",[e._v("list")])]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("list")]),e._v(" "),v("th",{staticStyle:{"text-align":"right"}},[e._v("dict")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("查找和插入的时间随着元素的增加而增加")]),e._v(" "),v("td",{staticStyle:{"text-align":"right"}},[e._v("查找和插入的速度极快，不会随着key的增加而变慢")])]),e._v(" "),v("tr",[v("td",[e._v("需要占用大量的内存，内存浪费多")]),e._v(" "),v("td",{staticStyle:{"text-align":"right"}},[e._v("占用空间小，浪费内存很少")])])])])])]),e._v(" "),v("p",[e._v("所以，dict是用空间来换取时间的一种方法。")])]),e._v(" "),v("li",[v("p",[e._v("set\nset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key")])])]),e._v(" "),v("ul",[v("li",[v("p",[e._v("要创建一个set，需要提供一个list作为输入集合：")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n")])])]),e._v(" "),v("li",[v("p",[v("code",[e._v("add(key)")]),e._v(" 添加元素，"),v("code",[e._v("remove(key)")]),e._v("删除元素")])]),e._v(" "),v("li",[v("p",[e._v("set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：")]),e._v(" "),v("pre",[v("code",[e._v(" ```\n >>> s1 = set([1, 2, 3])\n >>> s2 = set([2, 3, 4])\n >>> s1 & s2\n {2, 3}\n >>> s1 | s2\n {1, 2, 3, 4}\n ```\n")])])])]),e._v(" "),v("h1",[e._v("函数")]),e._v(" "),v("h2",[e._v("调用函数")]),e._v(" "),v("ol",[v("li",[v("p",[v("a",{attrs:{href:"http://docs.python.org/3/library/functions.html#abs"}},[e._v("python内置函数")])])]),e._v(" "),v("li",[v("p",[e._v("交互式命令行通过"),v("code",[e._v("help(abs)")]),e._v("查看"),v("code",[e._v("abs")]),e._v("函数的帮助信息")])]),e._v(" "),v("li",[v("p",[e._v("报错情况")]),e._v(" "),v("ul",[v("li",[e._v("调用函数的时候，如果传入的参数数量不对，会报"),v("code",[e._v("TypeError")]),e._v("的错误")]),e._v(" "),v("li",[e._v("但参数类型不能被函数所接受，报"),v("code",[e._v("TypeError")]),e._v("的错误")])])]),e._v(" "),v("li",[v("p",[e._v("函数名其实就是指向一个函数对象的引用")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v(">>> a = abs # 变量a指向abs函数\n>>> a(-1) # 所以也可以通过a调用abs函数\n1\n")])])])]),e._v(" "),v("h2",[e._v("定义函数")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("使用"),v("code",[e._v("def")]),e._v("语句定义")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n")])])]),e._v(" "),v("li",[v("p",[e._v("如果没有"),v("code",[e._v("return")]),e._v("语句，函数执行完毕后也会返回结果，只是结果为"),v("code",[e._v("None")]),e._v("。"),v("code",[e._v("return None")]),e._v("可以简写为"),v("code",[e._v("return")]),e._v("。")])]),e._v(" "),v("li",[v("p",[e._v("如果想定义一个什么事也不做的空函数，可以用"),v("code",[e._v("pass")]),e._v("语句")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def nop():\npass\n")])])]),e._v(" "),v("li",[v("p",[e._v("函数可以同时返回多个值，但其实就是一个"),v("code",[e._v("tuple")])])])]),e._v(" "),v("h2",[e._v("函数参数")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("默认参数")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n")])])])]),e._v(" "),v("p",[e._v("定义默认参数要牢记一点：默认参数必须指向不变对象！")]),e._v(" "),v("pre",[v("code",[e._v("```\ndef add_end(L=[]):\n\tL.append('END')\n\treturn L\n\t\n>>> add_end()\n['END']\n>>> add_end()\n['END','END']\n\ndef add_end(L=None):\n    if L is None:\n        L = []\n    L.append('END')\n    return L\n```\n")])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[e._v("可变参数(就是传入的参数个数是可变的)")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n# Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去\n>>> nums = [1, 2, 3]\n>>> calc(*nums)\n14\n")])])]),e._v(" "),v("li",[v("p",[e._v("关键字参数（关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个"),v("code",[e._v("dict")]),e._v("）")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n    \n>>> person('Michael', 30)\nname: Michael age: 30 other: {}\n\n>>> person('Bob', 35, city='Beijing')\nname: Bob age: 35 other: {'city': 'Beijing'}\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n\n\n>>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n\n")])]),e._v(" "),v("p",[v("code",[e._v("**extra")]),e._v("表示把"),v("code",[e._v("extra")]),e._v("这个"),v("code",[e._v("dict")]),e._v("的所有"),v("code",[e._v("key-value")]),e._v("用关键字参数传入到函数的"),v("code",[e._v("**kw")]),e._v("参数，"),v("code",[e._v("kw")]),e._v("将获得一个"),v("code",[e._v("dict")]),e._v("，注意"),v("code",[e._v("kw")]),e._v("获得的"),v("code",[e._v("dict")]),e._v("是"),v("code",[e._v("extra")]),e._v("的一份拷贝，对kw的改动不会影响到函数外的"),v("code",[e._v("extra")])])]),e._v(" "),v("li",[v("p",[e._v("命名关键字参数")]),e._v(" "),v("pre",{staticClass:"hljs"},[v("code",{pre:!0},[e._v("def person(name, age, *, city, job):\n    print(name, age, city, job)\n")])])])])])}],!1,null,null,null);n.default=component.exports}}]);